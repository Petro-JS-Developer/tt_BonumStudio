{"version":3,"sources":["Components/PostsList/PostList.tsx","App.tsx","index.tsx"],"names":["PostList","data","className","map","id","title","body","GET_POSTS","gql","useState","limit","setLimit","useQuery","variables","offset","loading","fetchMore","posts","onLoadMore","currentLength","length","then","fetchMoreResult","Number","onScroll","e","onLoadMor","currentTarget","scrollTop","clientHeight","scrollHeight","handleScroll","client","ApolloClient","uri","cache","InMemoryCache","typePolicies","Query","fields","feed","offsetLimitPagination","read","existing","args","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAoBeA,EAhBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,mCACE,oBACEC,UAAU,YADZ,SAGGD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACR,qBAAaJ,UAAU,kBAAvB,UACE,qBAAKA,UAAU,qBAAf,SAAqCE,IACrC,qBAAKF,UAAU,wBAAf,SAAwCG,IACxC,qBAAKH,UAAU,uBAAf,SAAuCI,MAHhCF,WCcXG,G,MAAYC,cAAH,+KAYA,aAAO,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEkBC,mBAAgBL,EAAW,CAC9DM,UAAW,CACTC,OAAQ,EACRJ,WAHIK,EAFW,EAEXA,QAASd,EAFE,EAEFA,KAAMe,EAFJ,EAEIA,UAOjBC,EAASF,EAA6B,GAA9B,OAAWd,QAAX,IAAWA,OAAX,EAAWA,EAAMgB,MAAMhB,KAE/BiB,EAAa,WACjB,IAAMC,EAAa,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAOG,OAC7BJ,EAAU,CACRH,UAAW,CACTC,OAAQK,EACRT,MAAO,MAERW,MAAK,SAACC,GACPX,EAASY,OAAO,GAAD,OAAIJ,IAAmBG,EAAgBrB,KAAKgB,MAAMhB,KAAKmB,YAc1E,OACE,sBACElB,UAAU,MACVsB,SAAU,SAACC,IAbM,SAAC,EACpBC,GAAwC,IADlBC,EACiB,EADjBA,cAGpBA,EAAcC,UAAYD,EAAcE,aAAe,KACtDF,EAAcG,cAEfJ,IAQEK,CAAaN,EAAGP,IAHpB,UAME,oBAAIhB,UAAU,YAAd,uBACCa,GAAW,8CACVA,GACA,cAAC,EAAD,CACEd,KAAMgB,GAAS,SCvEnBe,EAAS,IAAIC,eAAa,CAC9BC,IAAK,qCACLC,MAAO,IAAIC,gBAAc,CACvBC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACNC,KAAK,2BACAC,eADD,IAEFC,KAFG,SAEEC,EAFH,GAOO,IAAD,IAJNC,KAIM,IAHJ9B,cAGI,MAHK,EAGL,MAFJJ,aAEI,aAFIiC,QAEJ,IAFIA,OAEJ,EAFIA,EAAUvB,OAEd,EACN,OAAOuB,GAAYA,EAASE,MAAM/B,EAAQA,EAASJ,aASjEoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBhB,OAAQA,EAAxB,SACE,cAAC,EAAD,QAIJiB,SAASC,eAAe,W","file":"static/js/main.c8585e21.chunk.js","sourcesContent":["import React from 'react';\nimport './postsList.scss';\nimport { Post, arrPosts } from '../../App';\n\nconst PostList = ({ data }:{data:arrPosts}) => (\n  <>\n    <ul\n      className=\"listPosts\"\n    >\n      {data.map(({ id, title, body }: Post) => (\n        <li key={id} className=\"listPosts__item\">\n          <div className=\"listPosts__item_id\">{id}</div>\n          <div className=\"listPosts__item_title\">{title}</div>\n          <div className=\"listPosts__item_body\">{body}</div>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport PostList from './Components/PostsList/PostList';\nimport './App.scss';\n\nexport interface Data {\n  data: Posts\n}\n\nexport interface Posts {\n  posts: arrPosts\n}\n\nexport interface arrPosts {\n[x: string]: any;\ndata: [Post]\n}\n\nexport interface Post {\n    id: string;\n    title: string;\n    body: string;\n}\n\nconst GET_POSTS = gql`\n  query getPosts($limit: Int) {\n    posts(options: {paginate:{limit:$limit}}) {\n    data {\n      id\n      title\n      body\n    }\n  }\n  }\n`;\n\nexport default () => {\n  const [limit, setLimit] = useState(10);\n  const { loading, data, fetchMore } = useQuery<Posts>(GET_POSTS, {\n    variables: {\n      offset: 0,\n      limit,\n    },\n  });\n\n  const posts = !loading ? data?.posts.data : [];\n\n  const onLoadMore = () => {\n    const currentLength = posts?.length;\n    fetchMore({\n      variables: {\n        offset: currentLength,\n        limit: 10,\n      },\n    }).then((fetchMoreResult) => {\n      setLimit(Number(`${currentLength}`) + fetchMoreResult.data.posts.data.length);\n    });\n  };\n\n  const handleScroll = ({ currentTarget }: React.UIEvent<HTMLDivElement, UIEvent>,\n    onLoadMor: { (): void; (): void; }) => {\n    if (\n      currentTarget.scrollTop + currentTarget.clientHeight + 300\n    >= currentTarget.scrollHeight\n    ) {\n      onLoadMor();\n    }\n  };\n\n  return (\n    <div\n      className=\"app\"\n      onScroll={(e) => {\n        handleScroll(e, onLoadMore);\n      }}\n    >\n      <h1 className=\"blockName\">All posts</h1>\n      {loading && <div>Loading...</div>}\n      {!loading && (\n        <PostList\n          data={posts || [] as any}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { offsetLimitPagination } from '@apollo/client/utilities';\n\nimport './index.css';\n\nimport App from './App';\n\nconst client = new ApolloClient({\n  uri: 'https://graphqlzero.almansi.me/api',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          feed: {\n            ...offsetLimitPagination(),\n            read(existing, {\n              args: {\n                offset = 0,\n                limit = existing?.length,\n              },\n            }: any) {\n              return existing && existing.slice(offset, offset + limit);\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}